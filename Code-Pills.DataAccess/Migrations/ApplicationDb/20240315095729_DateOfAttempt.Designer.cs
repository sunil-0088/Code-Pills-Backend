// <auto-generated />
using System;
using Code_Pills.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Code_Pills.DataAccess.Migrations.ApplicationDb
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240315095729_DateOfAttempt")]
    partial class DateOfAttempt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Code_Pills.DataAccess.EntityModels.Contest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Attendees")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsMonthly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWeekly")
                        .HasColumnType("bit");

                    b.Property<string>("Prize1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prize2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prize3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Winner1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Winner2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Winner3")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contests");
                });

            modelBuilder.Entity("Code_Pills.DataAccess.EntityModels.ContestQuestionMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("QuestionId");

                    b.ToTable("ContestQuestionMappings");
                });

            modelBuilder.Entity("Code_Pills.DataAccess.EntityModels.ContestUserMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("UserId");

                    b.ToTable("ContestUserMappings");
                });

            modelBuilder.Entity("Code_Pills.DataAccess.EntityModels.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PillCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Featured");
                });

            modelBuilder.Entity("Code_Pills.DataAccess.EntityModels.FeatureQuestionMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FeatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("QuestionId");

                    b.ToTable("FeaturedQuestionMappings");
                });

            modelBuilder.Entity("Code_Pills.DataAccess.EntityModels.FeatureUserMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FeatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("UserId");

                    b.ToTable("FeaturedUserMappings");
                });

            modelBuilder.Entity("Code_Pills.DataAccess.EntityModels.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Code_Pills.DataAccess.EntityModels.PerformanceMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Attempts")
                        .HasColumnType("int");

                    b.Property<int>("CreditsLeft")
                        .HasColumnType("int");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("Solved")
                        .HasColumnType("int");

                    b.Property<int>("TotalCredits")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("PerformanceMappings");
                });

            modelBuilder.Entity("Code_Pills.DataAccess.EntityModels.PersonalInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Profession")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skills")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("PersonalInformation");
                });

            modelBuilder.Entity("Code_Pills.DataAccess.EntityModels.Question", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Attempts")
                        .HasColumnType("int");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<int>("Shares")
                        .HasColumnType("int");

                    b.Property<int>("Submissions")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Code_Pills.DataAccess.EntityModels.QuestionTagMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TagId");

                    b.ToTable("QuestionTagMappings");
                });

            modelBuilder.Entity("Code_Pills.DataAccess.EntityModels.Skills", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SkilllName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Code_Pills.DataAccess.EntityModels.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCompany")
                        .HasColumnType("bit");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Code_Pills.DataAccess.EntityModels.UserOtp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Otp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserOtp");
                });

            modelBuilder.Entity("Code_Pills.DataAccess.EntityModels.UserQuestionMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSolved")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Solution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserQuestionMappings");
                });

            modelBuilder.Entity("Code_Pills.DataAccess.EntityModels.ContestQuestionMapping", b =>
                {
                    b.HasOne("Code_Pills.DataAccess.EntityModels.Contest", "Contest")
                        .WithMany("ContestQuestionMapping")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Code_Pills.DataAccess.EntityModels.Question", "Question")
                        .WithMany("ContestQuestionMapping")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Code_Pills.DataAccess.EntityModels.ContestUserMapping", b =>
                {
                    b.HasOne("Code_Pills.DataAccess.EntityModels.Contest", "Contest")
                        .WithMany("ContestUserMapping")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Code_Pills.DataAccess.EntityModels.PersonalInfo", "PersonalInfo")
                        .WithMany("ContestUserMapping")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("PersonalInfo");
                });

            modelBuilder.Entity("Code_Pills.DataAccess.EntityModels.FeatureQuestionMapping", b =>
                {
                    b.HasOne("Code_Pills.DataAccess.EntityModels.Feature", "Feature")
                        .WithMany("FeaturedQuestionMapping")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Code_Pills.DataAccess.EntityModels.Question", "Question")
                        .WithMany("FeaturedQuestionMapping")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Code_Pills.DataAccess.EntityModels.FeatureUserMapping", b =>
                {
                    b.HasOne("Code_Pills.DataAccess.EntityModels.Feature", "Feature")
                        .WithMany("FeaturedUserMapping")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Code_Pills.DataAccess.EntityModels.PersonalInfo", "PersonalInfo")
                        .WithMany("FeaturedUserMapping")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("PersonalInfo");
                });

            modelBuilder.Entity("Code_Pills.DataAccess.EntityModels.PerformanceMapping", b =>
                {
                    b.HasOne("Code_Pills.DataAccess.EntityModels.PersonalInfo", "PersonalInfo")
                        .WithOne("PerformanceMapping")
                        .HasForeignKey("Code_Pills.DataAccess.EntityModels.PerformanceMapping", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalInfo");
                });

            modelBuilder.Entity("Code_Pills.DataAccess.EntityModels.QuestionTagMapping", b =>
                {
                    b.HasOne("Code_Pills.DataAccess.EntityModels.Question", "Question")
                        .WithMany("QuestionTagMapping")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Code_Pills.DataAccess.EntityModels.Tag", "Tag")
                        .WithMany("QuestionTagMapping")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Code_Pills.DataAccess.EntityModels.UserQuestionMapping", b =>
                {
                    b.HasOne("Code_Pills.DataAccess.EntityModels.Question", "Question")
                        .WithMany("UserQuestionMapping")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Code_Pills.DataAccess.EntityModels.PersonalInfo", "PersonalInfo")
                        .WithMany("UserQuestionMapping")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalInfo");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Code_Pills.DataAccess.EntityModels.Contest", b =>
                {
                    b.Navigation("ContestQuestionMapping");

                    b.Navigation("ContestUserMapping");
                });

            modelBuilder.Entity("Code_Pills.DataAccess.EntityModels.Feature", b =>
                {
                    b.Navigation("FeaturedQuestionMapping");

                    b.Navigation("FeaturedUserMapping");
                });

            modelBuilder.Entity("Code_Pills.DataAccess.EntityModels.PersonalInfo", b =>
                {
                    b.Navigation("ContestUserMapping");

                    b.Navigation("FeaturedUserMapping");

                    b.Navigation("PerformanceMapping")
                        .IsRequired();

                    b.Navigation("UserQuestionMapping");
                });

            modelBuilder.Entity("Code_Pills.DataAccess.EntityModels.Question", b =>
                {
                    b.Navigation("ContestQuestionMapping");

                    b.Navigation("FeaturedQuestionMapping");

                    b.Navigation("QuestionTagMapping");

                    b.Navigation("UserQuestionMapping");
                });

            modelBuilder.Entity("Code_Pills.DataAccess.EntityModels.Tag", b =>
                {
                    b.Navigation("QuestionTagMapping");
                });
#pragma warning restore 612, 618
        }
    }
}
